
( function () {

'use strict';

var query = require('mysql/lib/mysql_pool.js')

Function.prototype.getName = function () {
    return this.name || this.toString().match(/function\s*([^(]*)\(/)[1]
}

var M = function ( datasheet ) {
    this.query = ''
    this.datasheet = datasheet
    this.queue = []
}

M.prototype = {

    constructor: M,

    /**
     * @param {Array}  data such as ['name','sex']
     * @public
     */ 

    select: function ( data ) {
        return this._intoQueue( 0, data, 'select')
    },

    /**
     * @param {Array}  data  such as [{name: 'vida', age: '19'},...]
     * @public
     */ 

    insert: function ( data ) {
        return this._intoQueue( 0, data, 'insert')
    },

    /**
     * @param {Array}  data  such as [{name: 'vida', age: '19'},...]
     * @public
     */ 

    delete: function ( data ) {
        return this._intoQueue( 0, data, 'delete')
    },

    updata: function ( data ) {
        return this._intoQueue( 0, data, 'updata')
    },

    /**
     * @param {Array}  Conditions 对象数组
     * @return {String} 条件语句
     * @public
     */ 
    where: function ( conditions = [] ) {
        var len = conditions.length,
            data = ''

        if( len == 0 ) throw new Error('function where() should have parameter !')

        for (let i = 0; i < len; i++) {

        }
    },    

    do: function () {
        var i = 0,
            queue = this.queue,
            len = this.queue.length
        
            queue.sort( function (a, b) {
                return a.priority - b.priority
            })
            console.log(queue)
    },

    _intoQueue: function (data, priority, name) {

        this.queue.push({
            priority: priority,
            data: data,
            name: name
        });

        return this
    }
}

var x = new M('vida')

console.log(x.select('name'))


}() )